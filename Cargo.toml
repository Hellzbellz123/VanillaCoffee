[workspace]
resolver = "2"
default-members = ["crates/asha_macros", "crates/aspenlib", "crates/desktop"]
members = [
  "crates/asha_macros",
  "crates/aspenlib",
  "crates/desktop",
  "crates/mobile",
  "crates/wasm",
]
exclude = ["deps"]

[workspace.dependencies]
bevy = { path = "deps/bevy", default-features = false, features = [
  "bevy_pbr",                    # bevy_pbr / bevy_asset / bevy_render / bevy_core_pipeline
  "bevy_picking",
  "bevy_sprite",
  "bevy_sprite_picking_backend",
  "bevy_ui",                     # bevy_ui / bevy_text / bevy_sprite (sprite-picking and picking plugin) / bevy_color / bevy_core_pipeline
  "bevy_winit",                  # Support for creating windows
  # "x11",              # Support xOrg Windows
  "wayland", # Support Wayland windows
  # "png",              # png is my preffered image format
  # "serialize",        # Support for `serde` Serialize/Deserialize
  # "tonemapping_luts", # extra tonemapping utils requires ktx2 & zstd
  # "ktx2",             # gpu friendly texture format
  # "zstd",             # zstd is for ktx2 compression
] }

[workspace.lints.rust]
missing-docs = { level = "deny" }

[workspace.lints.clippy]
### denied lints ###
missing_docs_in_private_items = { level = "deny" }
correctness = { level = "deny", priority = -1 }
suspicious = { level = "deny", priority = -1 }
complexity = { level = "deny", priority = -1 }
perf = { level = "deny", priority = -1 }
style = { level = "deny", priority = -1 }
pedantic = { level = "deny", priority = -1 }
nursery = { level = "deny", priority = -1 }
cargo = { level = "deny", priority = -1 }

### warned lints ###
too-many-lines = "warn"
missing_errors_doc = "warn"
missing_panics_doc = "warn"
missing_safety_doc = "warn"

### allowed lints from clippy pedantic ###
multiple-crate-versions = { level = "allow" }
needless_pass_by_value = { level = "allow" }
module_name_repetitions = { level = "allow" }
wildcard_imports = { level = "allow" }
cast_possible_truncation = { level = "allow" }
cast_precision_loss = { level = "allow" }
cast-sign-loss = { level = "allow" }
cast_possible_wrap = { level = "allow" }

# Enable high optimizations for dependencies (incl. Bevy), but not for our code:
[profile.dev.package."*"]
codegen-units = 32
incremental = false
opt-level = 3

# Enable a small amount of optimization in debug mode
[profile.dev]
codegen-units = 256
opt-level = 1
incremental = true
lto = "off"

[profile.release]
strip = true
debug = false
codegen-units = 1
opt-level = 'z'
lto = "fat"

# broken dependencies
[patch.crates-io]
# Patching local bevy plugin crates does not usually make them work
# Cargo will use both versions of bevy so the patches usually
# just break compiling if dependencies use different
# bevy versions
avian2d = { path = "deps/avian/crates/avian2d" }
bevy_ecs_tilemap = { path = "deps/bevy_ecs_tilemap" }
bevy_egui = { path = "deps/bevy_egui" }
bevy_common_assets = { path = "deps/bevy_common_assets" }
bevy_ecs_ldtk_macros = { path = "deps/bevy_ecs_ldtk/macros" }

# # Replace bevy core crates with local copy for ALL crates that use them ###
bevy = { path = "deps/bevy" }
bevy_a11y = { path = "deps/bevy/crates/bevy_a11y" }
bevy_animation = { path = "deps/bevy/crates/bevy_animation" }
bevy_app = { path = "deps/bevy/crates/bevy_app" }
bevy_asset = { path = "deps/bevy/crates/bevy_asset" }
bevy_audio = { path = "deps/bevy/crates/bevy_audio" }
bevy_color = { path = "deps/bevy/crates/bevy_color" }
bevy_core = { path = "deps/bevy/crates/bevy_core" }
bevy_core_pipeline = { path = "deps/bevy/crates/bevy_core_pipeline" }
bevy_derive = { path = "deps/bevy/crates/bevy_derive" }
bevy_dev_tools = { path = "deps/bevy/crates/bevy_dev_tools" }
bevy_diagnostic = { path = "deps/bevy/crates/bevy_diagnostic" }
bevy_dylib = { path = "deps/bevy/crates/bevy_dylib" }
bevy_ecs = { path = "deps/bevy/crates/bevy_ecs" }
bevy_encase_derive = { path = "deps/bevy/crates/bevy_encase_derive" }
bevy_gilrs = { path = "deps/bevy/crates/bevy_gilrs" }
bevy_gizmos = { path = "deps/bevy/crates/bevy_gizmos" }
bevy_gltf = { path = "deps/bevy/crates/bevy_gltf" }
bevy_hierarchy = { path = "deps/bevy/crates/bevy_hierarchy" }
bevy_image = { path = "deps/bevy/crates/bevy_image" }
bevy_input = { path = "deps/bevy/crates/bevy_input" }
bevy_internal = { path = "deps/bevy/crates/bevy_internal" }
bevy_log = { path = "deps/bevy/crates/bevy_log" }
bevy_macro_utils = { path = "deps/bevy/crates/bevy_macro_utils" }
bevy_math = { path = "deps/bevy/crates/bevy_math" }
bevy_mesh = { path = "deps/bevy/crates/bevy_mesh" }
bevy_mikktspace = { path = "deps/bevy/crates/bevy_mikktspace" }
bevy_pbr = { path = "deps/bevy/crates/bevy_pbr" }
bevy_picking = { path = "deps/bevy/crates/bevy_picking" }
bevy_ptr = { path = "deps/bevy/crates/bevy_ptr" }
bevy_reflect = { path = "deps/bevy/crates/bevy_reflect" }
bevy_remote = { path = "deps/bevy/crates/bevy_remote" }
bevy_render = { path = "deps/bevy/crates/bevy_render" }
bevy_scene = { path = "deps/bevy/crates/bevy_scene" }
bevy_sprite = { path = "deps/bevy/crates/bevy_sprite" }
bevy_state = { path = "deps/bevy/crates/bevy_state" }
bevy_tasks = { path = "deps/bevy/crates/bevy_tasks" }
bevy_text = { path = "deps/bevy/crates/bevy_text" }
bevy_time = { path = "deps/bevy/crates/bevy_time" }
bevy_transform = { path = "deps/bevy/crates/bevy_transform" }
bevy_ui = { path = "deps/bevy/crates/bevy_ui" }
bevy_utils = { path = "deps/bevy/crates/bevy_utils" }
bevy_window = { path = "deps/bevy/crates/bevy_window" }
bevy_winit = { path = "deps/bevy/crates/bevy_winit" }

### unused patches atm ###
# iyes_progress = {path = "deps/iyes_progress"}
